{
    "compilerOptions": {
        "strict": true,
        "outDir": "./dist/",
        // Не позволяет использовать переменные без явного указания типа
        "noImplicitAny": true,
        // Указываем модульную систему. Различные способы модульной сборки
        "module": "ESNext",
        // Указываем версию ECMAScript, в которую код будет компилироваться
        // Нужно для поддержки большинства браузеров
        "target": "es5",
        // "lib": ["dom", "dom.iterable", "esnext"],
        // Для обработки конструкций как в React
        // Позволяет обрабатывать компилятору не только ts файлы, но и js
        "noUnusedParameters": false,
        "allowJs": true,
        "moduleResolution": "node",
        "esModuleInterop": true,
        "allowSyntheticDefaultImports": true,
        "downlevelIteration": true,
        // Для абсолютного импорта
        "baseUrl": ".",
        "paths": {
            "*": ["./src/*"]
        },
        "forceConsistentCasingInFileNames": true,
        "jsx": "react-jsx"
    },

    /* 
       webpack.config.ts при импорте все равно использует
       common.js (require("filename"))
       Поэтому указываем опции компиляции как CommonJS
    */
    "ts-node": {
        "compilerOptions": {
            "module": "CommonJS"
        }
    },

    // --- include ---
    // Если опция files не указана,
    // то TypeScript будет использовать эту директиву
    // для поиска компилируемых файлов.
    // Если include так же не указана, то её значение
    // будет неявно объявлено как ["**/*"].
    // Это означает, что поиск файлов будет осуществляться
    // во всех папках и их подпапках. Такое поведение не оптимально,
    // поэтому в целях производительности лучше всегда указывать конкретные пути.
    // Можно прописывать как пути к конкретным файлам, так и паттерны путей.
    "include": ["./config/*", "**/*"]
    // react-jsx - чтобы не нужно было импортировать React в каждом файле
}
